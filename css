* {
    margin: 0;
    box-sizing: border-box; /* padding and border incleded in the width/height */
}
body {
    font-family: Arial, Helvetica, sans-serif;
}
select {
    -webkit-appearance: none;
    -moz-appearance: none;
    padding: 5px 25px 5px 5px;
    background: url('../img/dr_down_16.png') no-repeat right;
    background-position-x: calc(100% - 5px);
}
select::-ms-expand {
    display: none;
}
.wrapper {
    width: 100vw;
    height: 100vh;
    overflow-y: hidden;
    overflow-x: hidden;
}
.row {
    width: 100%;
    height: 50%;
    margin: 0;
}
.cell {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-user-select: none;
    -moz-user-select: -moz-none;
    -ms-user-select: none;
    user-select: none;
    justify-content: center; /* align horizontal */
    align-items: center;
    float: left;
    padding: 0;
    width: 50%;
    height: 100%;
    border: 1px solid #ccc;
    cursor: default;
    font-size: calc(8vmin);
    font-weight: bold;
    transition: background 800ms;
}
.rotate-90 {
    -moz-transform: rotate(90deg);
    -ms-transform: rotate(90deg); /* IE 9 */
    -webkit-transform: rotate(90deg);
    transform: rotate(90deg);
}
.rotate-180 {
    -moz-transform: rotate(180deg);
    -ms-transform: rotate(180deg); /* IE 9 */
    -webkit-transform: rotate(180deg);
    transform: rotate(180deg);
}
.rotate-270 {
    -moz-transform: rotate(270deg);
    -ms-transform: rotate(270deg); /* IE 9 */
    -webkit-transform: rotate(270deg);
    transform: rotate(270deg);
}
.spin-right {
    animation: spin-right 2s infinite linear;
    -webkit-animation: spin-right 2s infinite linear;
    -moz-animation: spin-right 2s infinite linear;
}
    @keyframes spin-right{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }
        100% {
            -moz-transform: rotate(359deg);
            -ms-transform: rotate(359deg);
            -webkit-transform: rotate(359deg);
            transform: rotate(359deg);
        }
    }
    @-webkit-keyframes spin-right{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg)
        }
        100% {
            -ms-transform: rotate(359deg);
            -moz-transform: rotate(359deg);
            -webkit-transform: rotate(359deg);
            transform: rotate(359deg)
        }
    }
.spin-left {
    animation: spin-left 2s infinite linear;
    -webkit-animation: spin-left 2s infinite linear;
    -moz-animation: spin-left 2s infinite linear;
}
    @keyframes spin-left{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
        }
        100% {
            -moz-transform: rotate(-359deg);
            -ms-transform: rotate(-359deg);
            -webkit-transform: rotate(-359deg);
            transform: rotate(-359deg);
        }
    }
    @-webkit-keyframes spin-left{
        0% {
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            transform: rotate(0deg)
        }
        100% {
            -moz-transform: rotate(-359deg);
            -ms-transform: rotate(-359deg);
            -webkit-transform: rotate(-359deg);
            transform: rotate(-359deg)
        }
    }
.cell-symbol {
    color: inherit;
    font-size: calc(8vmin);
    font-weight: bold;
}
.normal-cell {
    color: black;
    background: white;
}
.hovered-cell {
    color: black;
    /*background: rgb(249, 246, 243);*/
    border: 1px solid #555;
}
.traced-cell {
    color: black;
    background: #f1f9f0;
}
.selected-cell {
    color: white;
    background: navy;
}
.correct-cell {
    color: black;
    background: #bbf4b8;
}
.wrong-cell {
    color: black;
    background: #f4adad;
}
.color-num {
    padding: 3px 10px;
    margin-right: 2px;
    margin-bottom: 5px;
    display: inline-block;
    border: 1px solid #ccc;
    font-size: 1.1em;
    font-weight: bold;
 <div class="w3-row" >
                        <div class="w3-col w3-half">
                            <input class="w3-check" type="checkbox" v-model="inverseCount" style="margin-top: 5px;">
                            <input class="w3-check" type="checkbox" v-model="inverseCount" :disabled="variousCounts" style="margin-top: 5px;">
                            <label class="w3-validate">Inverse Count </label>
                            <br>
                            <input class="w3-check" type="checkbox" v-model="divergentCount" style="margin-top: 5px;">
                            <input class="w3-check" type="checkbox" v-model="divergentCount" :disabled="variousCounts" style="margin-top: 5px;">
                            <label class="w3-validate">Divergent Count </label>
                            <br>
                            <input class="w3-check" type="checkbox" v-model="variousCounts" style="margin-top: 5px;">
                            <label class="w3-validate">Various Counts </label>
                        </div>
                        <div class="w3-col w3-half">
                            <div class="w3-container w3-padding-0" style="margin-top: 10px; width: 90%">
                                <span class="color-num"
                                      v-if="groupCount == 1" v-html="groupRange(0)"></span>
                                <span class="color-num"
                            <div class="w3-container w3-padding-0" style="margin-top: 10px; width: 90%; float: left;">
                                <div class="color-num"
                                      v-if="groupCount == 1"
                                      v-html="groupRange(0)"></div>
                                <div class="color-num"
                                      :style="groupColorStyles[0]"
                                      v-if="groupCount > 1"
                                      v-html="groupRange(0)"></span>
                                <span class="color-num"
                                      v-html="groupRange(0)"></div>
                                <div class="color-num"
                                      :style="groupColorStyles[1]"
                                      v-if="groupCount > 1"
                                      v-html="groupRange(1)"></span>
                                <span class="color-num"
                                      v-html="groupRange(1)"></div>
                                <div class="color-num"
                                      :style="groupColorStyles[2]"
                                      v-if="groupCount > 2"
                                      v-html="groupRange(2)"></span>
                                <span class="color-num"
                                      v-html="groupRange(2)"></div>
                                <div class="color-num"
                                      :style="groupColorStyles[3]"
                                      v-if="groupCount == 4"
                                      v-html="groupRange(3)"></span>
                                      v-html="groupRange(3)"></div>
                            </div>
                        </div>
                    </div>
                    groupCount: 1,
    inverseCount: false,
    divergentCount: false,
    variousCounts: false,
    timerMode: false,
    timerMinutes: 5,
    currGroup: 0,
@@ -172,6 +173,9 @@ vueApp = new Vue({
        divergentCount: function () {
            this.initGame();
        },
        variousCounts: function () {
            this.initGame();
        },
        spinSymbols: function () {
            this.updateSymbolSpins();
        },
@@ -325,12 +329,10 @@ vueApp = new Vue({
                var h = Math.floor(grSize / 2);
                var d = Math.abs(currNum - h);
                if (this.groups[this.currGroup].inverted) {
                    if (currNum === h) {
                        num = h + 1;
                    } else if (currNum < h) {
                        num = grSize - currNum;
                    if (currNum <= h) {
                        num = grSize - currNum + 1;
                    } else { // currNum > h
                        num = 1 + (grSize - currNum);
                        num = 2 + (grSize - currNum);
                    }
                } else {
                    if (currNum === h) {
@@ -362,7 +364,7 @@ vueApp = new Vue({
                if (this.groups[groupIdx].divergent) {
                    var h = Math.floor(this.groups[groupIdx].size / 2);
                    if (this.groups[groupIdx].inverted) {
                        return this.groups[groupIdx].size + '&rarr;|' + '&larr;1';
                        return '1&rarr;|' + '&larr;' +  this.groups[groupIdx].size;
                    } else {
                        return '&larr;' + h + '|' + (h + 1) + '&rarr;';
                    }
@@ -395,18 +397,51 @@ vueApp = new Vue({
            var numsInGroup = Math.floor(cellCount / this.groupCount);
            for (g = 0; g < this.groupCount; g ++) {
                this.groups.push(new Group(numsInGroup));
                if (this.divergentCount) {
                    this.groups[g].divergent = true;
                    this.groups[g].currNum = Math.floor(this.groups[g].size / 2);
                }
            }
            this.groups[0].size += cellCount % this.groupCount;

            if (this.inverseCount) {
            if (this.variousCounts) {
                var various = [ {divergent: false, inverted: false, num: 'first'},
                                {divergent: false, inverted: true,  num: 'last'},
                                {divergent: true,  inverted: false, num: 'middle'},
                                {divergent: true,  inverted: true,  num: 'first'}
                ];
                for (g = 0; g < this.groupCount; g++) {
                    if (g % 2 > 0 || this.groupCount === 1) {
                        this.groups[g].inverted = true;
                        this.groups[g].currNum = this.groups[g].size;
                    this.groups[g].inverted = various[g].inverted;
                    this.groups[g].divergent = various[g].divergent;
                    switch (various[g].num) {
                        case 'last':
                            this.groups[g].currNum = this.groups[g].size;
                            break;
                        case 'middle':
                            this.groups[g].currNum = Math.floor(this.groups[g].size / 2);
                            break;
                        case 'first':
                            this.groups[g].currNum = 1;
                            break;
                        default:
                            this.groups[g].currNum = 1;
                    }

                }
            } else {
                for (g = 0; g < this.groupCount; g++) {
                    if (this.divergentCount) {
                        this.groups[g].divergent = true;
                        this.groups[g].currNum = Math.floor(this.groups[g].size / 2);
                    }
                }

                if (this.inverseCount) {
                    for (g = 0; g < this.groupCount; g++) {
                        if (g % 2 > 0 || this.groupCount === 1) {
                            this.groups[g].inverted = true;
                            if (this.groups[g].divergent) {
                                this.groups[g].currNum = 1;
                            } else {
                                this.groups[g].currNum = this.groups[g].size;
                            }
                        }
                    }
                }
            }